# Common properties
jawr.debug.on=false
jawr.gzip.on=true
jawr.gzip.ie6.on=false
jawr.charset.name=UTF-8
jawr.debug.overrideKey=debug

jawr.factory.use.orphans.mapper=false
#######################################################################################
# JavaScript properties and mappings
#######################################################################################

#--------------------------------------------------------------------------------------
# Bundle Hash Code Generator Configuration
#--------------------------------------------------------------------------------------

# By default JAWR generates a unique bundle hash using the file names of the JavaScript
# bundle  this leads to caching issues when JavaScript updates are made with no additional
# files added to the bundle.
# To ensure a new hash is generated anytime a change is made we need to tell JAWR to use the
# MD5 hash code generator
jawr.bundle.hashcode.generator=net.jawr.web.resource.bundle.hashcode.MD5BundleHascodeGenerator

#--------------------------------------------------------------------------------------
# AscMessageGenerator Configuration
#--------------------------------------------------------------------------------------

#provide a locale resolver to JAWR to help it understand the locale of the page
jawr.locale.resolver=net.jawr.web.resource.bundle.locale.SpringLocaleResolver

#register ASC message generator
#register the LessCssResourceGenerator
#jawr.custom.generators=

#######################################################################################
# JS bundles and mappings
#######################################################################################
jawr.debug.ie.force.css.bundle=true

# This optional parameter tells Jawr to look for js or css files only in the specified directory,
# which may speed the starting time up a bit.
jawr.js.bundle.basedir=/resources

# Auto generated ASC.loadBundle script -- converts messages_xx_XX.properties
j#awr.js.bundle.i18n.mappings=ascmessages:messages

#IMP LIBRARIES BUNDLE
jawr.js.bundle.jquery.mappings=/resources/libs/jquery/**
jawr.js.bundle.bootstrap.mappings=/resources/libs/bootstrap/js/**
jawr.js.bundle.angular.mappings=/resources/libs/angular/**

jawr.js.bundle.imp-core.id=/js/qline-core.js
jawr.js.bundle.imp-core.composite=true
jawr.js.bundle.imp-core.child.names=jquery, bootstrap, angular

#IMP APP BUNDLE
jawr.js.bundle.common.mappings=/resources/js/common/**
jawr.js.bundle.app.mappings=/resources/js/app/**

jawr.js.bundle.imp-app.id=/js/qline-app.js
jawr.js.bundle.imp-app.composite=true
jawr.js.bundle.imp-app.child.names=common, app

#######################################################################################
# CSS properties and mappings
#######################################################################################
#Toggle the use of a cache that will store and serve all the bundles directly from system memory.
jawr.css.use.cache=true

# This optional parameter tells Jawr to look for js or css files only in the specified directory,
# which may speed the starting time up a bit.
jawr.css.bundle.basedir=/resources

# CSS files will be all bundled together automatically
jawr.css.factory.use.singlebundle=false

#IMP LIBRARIES CSS BUNDLE
jawr.css.bundle.bootstrap.mappings=/resources/libs/bootstrap/css/**
jawr.css.bundle.angular.mappings=/resources/libs/angular/**

jawr.css.bundle.imp-core.id=/css/imp-core.css
jawr.css.bundle.imp-core.composite=true
jawr.css.bundle.imp-core.child.names=bootstrap, angular


#IMP CSS BUNDLE
jawr.css.bundle.imp-layout.mappings=/resources/css/**
jawr.css.bundle.imp-theme.mappings=/resources/theme/default/css/**

jawr.css.bundle.imp-app.id=/css/imp-app.css
jawr.css.bundle.imp-app.composite=true
jawr.css.bundle.imp-app.child.names=imp-layout, imp-theme